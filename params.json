{"name":"Sudo-morpheus.GitHub.io","tagline":"July CTF writeups","body":"# Splunk Botsv2 Write-Ups\r\n\r\n### Challenge 1:\r\n_**This is a simple question to get you familiar with submitting answers. What is the name of the company that makes the software that you are using for this competition? Answer guidance: A six-letter word with no punctuation.**_\r\n\r\nLook at the title of this section or the website you’re using to search.\r\n\r\n### Challenge 100:\r\n_**Amber Turing was hoping for Frothly to be acquired by a potential competitor which fell through, but visited their website to find contact information for their executive team. What is the website domain that she visited? Answer guidance: Do not provide the FQDN. Answer example: google.com**_\r\n\r\nTypically, the best way to start on a challenge if you don’t know how to start is to do a general search. Search through the index for any mention of Amber Turing:\r\n\r\n`index=botsv2 amber`\r\n\r\nThis doesn’t narrow our search up much. However, if you look at the fields on the left, you will see a src_user field. We see both computer users and email addresses. One such email address is Amber’s: aturing@froth.ly. Lets try sorting by emails from Amber Turing to see if we can find any hints. Click on her email to sort for only her email.\r\n\r\nLooking back at the question, we see a mention of an acquisition falling through. You can search through her emails for hints about an acquisition:\r\n\r\n`index=botsv2 src_user=”Amber Turing <aturing@froth.ly>” acquisition`\r\n\r\nThis should bring up only one event! Look through the content of the email and you will see discussion about an acquisition falling through. Look at the domain of the email address she sent this email to. This should be the website of the answer. \r\n\r\nJust to double check, the question tells us that she visited a website, which leads us to believe it will be http traffic. You can sort only http traffic with the search query sourcetype=”stream:http”. Then, you can search for the domain we found in the email. Checking the url field, we sure enough see visits to the website from this domain. The website is the answer.\r\n\r\n### Challenge 101:\r\n_**Amber found the executive contact information and sent him an email. What is the CEO's name? Provide the first and last name.**_\r\n\r\nRefer to the answer of Challenge 101. In that write-up, we found the email in question by searching for emails from Amber that mentioned an acquisition:\r\n\r\n`index=botsv2 src_user=”Amber Turing <aturing@froth.ly>” acquisition`\r\n\r\nYou should find one email from Amber that mentions an acquisition. From there, there are many ways to find the receiver of the email. Hint: There is a field that has both receiver and email in the title - you can find it on the left side. You can also look through the content of the email until you find the receiver email.\r\n\r\n### Challenge 102:\r\n_**After the initial contact with the CEO, Amber contacted another employee at this competitor. What is that employee's email address?**_\r\n\r\nIn the answer to Challenge 100, we found the domain of emails at the competitor company. All we have to do is search for emails from Amber to someone with that domain.\r\n\r\nWe can do this with the following search query, replacing <domain> with the domain you find in Challenge 100:\r\n\r\n`index=botsv2 src_user=\"Amber Turing <aturing@froth.ly>\" receiver_email{}=*@<domain>`\r\n\r\nHint: The “*” is very useful for many challenges. It is a wildcard that will match anything. Therefore, we are searching for any email from Amber to an email that ends with @<domain>. The * will match anything, so there can be anything at the beginning of the email. \r\n\r\nOn the left side, find the receiver_email{} field to find emails from berkbeer.com that have been contacted by Amber. One was already used as the answer to Challenge 101, so the other is the answer to this question.\r\n\r\n### Challenge 103:\r\n_**What is the name of the file attachment that Amber sent to a contact at the competitor?**_\r\n\r\nYou’re still looking for emails from Amber to contacts at the competitor, so keep the search query from Challenge 102 open. Hint: If you already closed it, you can just open it again by going  back to the main search page and looking through your search history. This time, we are looking for a file attachment.\r\n\r\nLuckily, splunk automatically extracts fields for file attachments in emails. Looking through the interesting fields on the left, try to find a field name that would describe a filename. There should be only one value for that field in this query, and that is the name of the file you’re looking for. \r\n\r\n### Challenge 104:\r\n_**What is Amber's personal email address?**_\r\n\r\nThis one was slightly harder. In previous challenges, we looked only for emails from Amber to the competitors. Now, let’s look for the full conversation between Amber and the competitor we found in Challenge 102.\r\n\r\nTo do so, lets do the following search:\r\n\r\n`index=botsv2 sourcetype=\"stream:smtp\" \"aturing@froth.ly\" “Answer from Challenge 102\"`\r\n\r\nReplace Answer from Challenge 2 with the email you found in Challenge 102. Sourcetype=”stream:smtp” is a new sourcetype. Smtp is a protocol used for emails, and by sorting by this sourcetype, we will search for only emails. Then, we include the email of both amber and the competitor to find all emails between the two.\r\nLet’s read through the content of the emails by expanding content_body for each of the two emails Amber sent to the competitors. In one of the emails, we find exactly what we are looking for:\r\n\r\nThe competitor requests Amber’s personal email. Now, let’s look at the other event to see Amber’s response. Opening the content body of the other event, it all looks like gibberish. Now, we have to use cryptography skills to read the email.\r\n\r\nTry looking through the content of the email to detect what the message is encrypted with. Hint: It is an encoding scheme that represents binary data as an ASCII string with a radix-64 representation. Use an online decoder to decode the message, and it will include Amber’s personal email address.\r\n\r\n### Challenge 105:\r\n_**What version of TOR did Amber install to obfuscate her web browsing? Answer guidance: Numeric with one or more delimiter.**_\r\n                        \r\nFirst, lets try to figure out how a TOR installation file will usually look. Go to the tor download page, and you will see that tor download files for windows have the following name: torbrowser-install-win64-9.5.1_en-US.exe. The 9.5.1 in that name looks like the filename.\r\n\r\nTherefore, we want to look for a string that contains “torbrowser” and “install” (we don’t know for sure that it will be a windows or US installation). We should also search for amber to narrow down to the user mentioned in the question.\r\n\r\nThis is easy enough to search:\r\n\r\n`index=botsv2 torbrowser install amber`\r\n\r\nLooking through the first few events, you’ll see a filesystem path that ends with a file that looks just like the tor installation file:\r\n\r\n`C:\\Users\\amber.turing\\Downloads\\torbrowser-install-<x.x.x>_en-US.exe`\r\n\r\nLook for the <x.x.x> in that file, which represents the version.\r\n\r\n### Challenge 200:\r\n_**What is the public IPv4 address of the server running www.brewertalk.com?**_\r\n\r\nWe want to find the public ipv4 address of a domain. The easiest way to do this is with DNS. As you might know, DNS is a service that returns the public ip address for an internet domain name.\r\n\r\nWe can look for dns events by searching for sourcetype=”stream:dns”. We should also search for the internet domain “www.brewertalk.com”:\r\n\r\n`index=”botsv2” “www.brewertalk.com” sourcetype=”stream:dns” `\r\n\r\nThe answer field shows the public ip address that DNS servers send back, and is the corresponding public ipv4 address for the server running www.brewertalk.com.\r\n\r\n### Challenge 201:\r\n_**Provide the IP address of the system used to run a web vulnerability scan against www.brewertalk.com.**_\r\n\r\nFirst, we need to understand how web vulnerability scanners work. Typically, they will check for common web vulnerabilities, including searching for hidden web directories. This is probably the best way to detect the vulnerability scanner.\r\n\r\nBecause vulnerability scanners check for web directories, they will try to access a lot of pages/directories, meaning that there will be a lot of 404 errors. We can look for just http connections that resulted in 404 errors using sourcetype=”stream:http” status=404. We should also search for the domain that is being scanned:\r\n\r\n`index=botsv2 sourcetype=stream:http status=404 www.brewertalk.com`\r\n\r\nLooking at the src_ip field to find the ip address from which the scanning is taking place, we see that almost half of all 404 errors come from a single ip address. That is the ip address of the system running the scan.\r\n\r\n### Challenge 202:\r\n_**The IP address from question 201 is also being used by a likely different piece of software to attack a URI path. What is the URI path? Answer guidance: Include the leading forward slash in your answer. Do not include the query string or other parts of the URI. Answer example: /phpinfo.php**_\r\n\r\nLet’s investigate the URI paths being attacked from that IP address. This information is stored in the uri_path field. The URI path refers to the subpath, instead of the whole URL. The simplest way to do this is simply to search for all traffic that contains the ip address from challenge 201, and filter by traffic that contains a uri_path field:\r\n\r\n`index=botsv2 “ip address from challenge 201” uri_path=*`\r\n\r\nLooking at the field info at the left, click on the uri_path. From there, you can see the most common uri path that is being attacked from the ip address.\r\n\r\n### Challenge 203:\r\n_**What SQL function is being abused on the uri path from question 202?**_\r\n\r\nContinuing on from the previous challenge, click on the most common uri_path to filter by it. This should narrow down to 1785 events, in which the ip address from challenge 201 attacked the URI path from challenge 202.\r\n\r\nLooking at the method field, we can see that all of these attacks are using the POST request method. To figure out what SQL function is being abused, we should take a look at what is being sent. For POST requests, this is captured in the form_data field.\r\n\r\nLook through the form_data for the first event. Reading through the form_data, you can observe a characteristic SQL injection, where keywords such as SUBSTRING, SELECT, ORDER BY, and FROM are used. What function are they wrapped in?\r\n\r\n### Challenge 204:\r\n_**What is Frank Ester’s password salt value on http://www.brewertalk.com?**_\r\n\r\nLet’s assume that the ip address from Challenge 201 had captured Frank Ester’s password salt. First, lets do a general search for Frank in the context of the ip address from Challenge 201:\r\n\r\n`index=”botsv2” *frank* “ip address from challenge 201”`\r\n\r\nThis returns only two events! Looking for an email, you should see an SQL XPATH syntax error on the email frankesters47@gmail.com. Let’s assume this was part of the sql injection attack.\r\n\r\nIn order to observe what is happening during the account, lets narrow events down to the time of the XPATH syntax error. Go to the event with the SQL error and click on the time. Click apply at the bottom of the popup to see nearby events within a 5 second timespan. Then, we want to see all POST data and responses that happened during this time as part of the attack, in chronological order.\r\n\r\nWe can do this by filtering for http traffic by the ip address from challenge 201 and the uri path in challenge 202:\r\n\r\n`index=”botsv2” sourcetype=”stream:http” uri_path=”challenge 202 answer” “challenge 201 answer” | reverse | table dest_content`\r\n\r\nNotice the extra two pipes (|) at the end of the command. The reverse command reverses the order of events, so that they are displayed in chronological order. The “table dest_content” section will just show the server’s response, which is where the salt will be returned after the sql injection.\r\n\r\nUse ctrl-f to search for “XPATH syntax error” (which we saw in the original error with frank’s email).  Scrolling through the events, look for the results from the server next to a XPATH syntax error. Look for a string that is approximately 5-10 characters long, which should be the salt.\r\n\r\n### Challenge 205:\r\n_**What is user btun’s password on brewertalk.com?**_\r\n\r\nStart out similarly to challenge 204. Start by searching for http traffic from the ip address from challenge 201 with a uri_path field value of the uri path from challenge 202. Also add btun at the end of the search to search for the attack on user btun. \r\n\r\nAgain, click on time to look for events within 5 seconds and remove btun from the search to see all traffic from the attacking machine. Again, search for:\r\n\r\n`index=”botsv2” sourcetype=”stream:http” uri_path=”challenge 202 answer” “challenge 201 answer” | reverse | table dest_content`\r\n\r\nin order to see the responses from the server to the sql injection. Searching again for XPATH syntax error with ctrl-f, look for btun. Then, you will see the salt and password hash in the next few responses.\r\n\r\nNow, you have to crack the password hash. Try looking up the top_1000.csv file to find common hashes.\r\n\r\n### Challenge 206:\r\n_**What are the characters displayed by the XSS probe? Answer guidance: Submit answer in native language or character set.**_\r\n\r\nTo answer this, we have to know something about XSS attacks. Typically, XSS attacks will include some kind of <script> in order to send the script. Let’s search for http data that contains the <script> tag:\r\n\r\n`index=botsv2 “<script>” sourcetype=”stream:http”`\r\n\r\nThis returns a lot of events, so lets do some more filtering. Cross-site scripting typically goes through a post request, so let’s search for unique POST request data, which is stored in the form_data field. The dedup command comes in handy - it searches for unique values of something. Lets add this to our last query:\r\n\r\n`| dedup form_data`\r\n\r\nNow, there are only 3 results! All that’s left is to read the form data and look for special characters. The form_data is URL-encoded, which can automatically be done in splunk by adding this to the search query:\r\n\r\n`| eval data=urldecode(form_data) | table data`\r\n\r\nOut of the 3 urldecoded results, look for the one with the special characters.\r\n\r\n### Challenge 207:\r\n_**What was the value of the cookie that Kevin’s browser transmitted to the malicious URL as part of a XSS attack? Answer guidance: All digits. Not the cookie name or symbols like an equal sign.\r\nAgain, we’re looking for a cross-site scripting attack. You can search for events in the stream:http sourcetype that contain both <script> (for a XSS attack) and kevin.**_\r\n\r\nYou should find only 1 event. The question asks for the value of the cookie, so look in the cookies field.  You can find the value of the cookie there, which is the correct answer.\r\n\r\n### Challenge 208:\r\n_**The brewertalk.com web site employed Cross Site Request Forgery (CSRF) techniques. What was the value of the anti-CSRF token that was stolen from Kevin Lagerfield’s computer and used to help create an unauthorized admin user on brewertalk.com?**_\r\n\r\nFirst, make sure you know how anti-CSRF tokens work. Learn more about the structure of CSRF tokens here: https://www.netsparker.com/blog/web-security/protecting-website-using-anti-csrf-token/. \r\n\r\nThe anti CSRF token is stolen from Kevin’s computer. The first thing that comes to mind for stealing something from Kevin’s computer is the XSS attack we investigated in the last two challenges. Keep the previous query open from challenge 207 that had the XSS attack on kevin. We will use this to find the time at which the CSRF token was stolen.\r\n\r\nClick on the time field in the left and click Apply under Nearby Events to search for all events that occurred in a 5 second timeframe of the XSS attack. Now, we have to search for the CSRF token. If you read through the link above, you would find the format that CSRF tokens are stored through in a html input tag with a specific type. Figure out what that input type is and search for `<input type=”<type>”`  to find the CSRF token.\r\n\r\n### Challenge 209:\r\n_**What brewertalk.com username was maliciously created by a spearphishing attack?**_\r\n\r\nLet’s take a look at what is done with the CSRF token in the previous challenge. Look for http traffic that contains the csrf token (with the same time frame of the xss attack that we used in the previous challenge:\r\n\r\n`index=botsv2 “csrf token from challenge 208” sourcetype=”stream:http” | reverse`\r\n\r\nRemember, reverse will show us what happens in chronological order. Look at the form_data of the POST request that is returned. Look closely at usernames being used, checking for any usernames that look correct, but may have a single letter that uses a different case and is thus used as part of the spear phishing attack to trick people.\r\n\r\n### Challenge 300:\r\n_**According to Frothly’s records, what is the likely MAC address of Mallory’s corporate MacBook? Answer guidance: Her corporate MacBook has the hostname MACLORY-AIR13.**_\r\n\r\nYou can use the Asset Center dashboard on Splunk to solve this challenge. The asset center allows you to search through asset data, which is basically a list of information (such as the MAC address, in our case).\r\n\r\nNavigate to the Asset Center dashboard. First, identify the Asset lookup fields you are interested in. You can find a list of fields here: https://docs.splunk.com/Documentation/UBA/5.0.3/GetDataIn/IdentifyAssets \r\n\r\nHint: Look at the question to find the fields you need. You need a field that will contain the hostname so you can search for Mallory’s MacBook, and a field for the answer, which is the MAC address.\r\n\r\nOnce you find the fields you need, perform a lookup for those fields through the Asset Center.\r\n\r\n### Challenge 301:\r\n_**What episode of Game of Thrones is Mallory excited to watch? Answer guidance: Submit the HBO title of the episode.**_\r\n\r\nYou can do a general search for Game of Thrones and Mallory. Hint: You may need to search for an acronym.\r\n\r\nYou should see 4 resulting smtp events. SMTP events are usually emails. Look through the fields on the left to gather information. Check the receiver or sender fields to make sure that Mallory is one of the receiver/senders. Make sure to look through all fields that may have content, including the content field and other fields such as file attachment info. You will find mention of a Game of Thrones episode number. Use your favorite search engine to look up the episode on HBO, and submit the title.\r\n\r\n### Challenge 302:\r\n_**What is Mallory Krauesen’s phone number? Answer guidance: ddd-ddd-dddd where d=[0-9]. No country code.**_\r\nBecause you are looking for a phone number, you need to use the Identity Center dashboard on Splunk. The Identity Center contains data with account names and other personal information about each identity. The Identity Center uses key=value pairs to filter, so you can do that to search for Mallory.\r\nSearch for Mallory’s username to find her phone number. Hint: You can use the * wildcard to search for anything containing a word, ex: \"*Mallory*\" or \"*krauesen*\".\r\n\r\n\r\n# Splunk Botsv3 Write-Ups\r\n\r\n### Challenge 1:\r\n_**This is a simple question to get you familiar with submitting answers. What is the name of the company that makes the software that you are using for this competition? Answer guidance: A six-letter word with no punctuation.**_\r\n\r\nThe name of the website that we are using to search for the answers.\r\n\r\n### Challenge 200:\r\n_**List out the IAM users that accessed an AWS service (successfully or unsuccessfully) in Frothly's AWS environment? Answer guidance: Comma separated without spaces, in alphabetical order. (Example: ajackson,mjones,tmiller)**_\r\n\r\nI wasn’t familiar with any key terms, so I searched for _AWS IAM users splunk_ on Google. The search results indicated I should use _aws:cloudtrail_ as the sourcetype for the search.\r\n\r\n` index=“botsv3” earliest=0 sourcetype=“aws:cloudtrail\" `\r\n\r\nI started scrolling through the resulting fields to find “user” or “username.” I found a field called _userIdentity.userName_, which contains the users we were looking for.\r\n\r\n### Challenge 201:\r\n_**What field would you use to alert that AWS API activity have occurred without MFA (multi-factor authentication)? Answer guidance: Provide the full JSON path. (Example: iceCream.flavors.traditional)**_\r\n\r\nI searched the key term, _mfa_. And since this scenario was similar to the previous question, I kept the sourcetype the same.\r\n\r\n` index=“botsv3” earliest=0 sourcetype=“aws:cloudtrail” *mfa* `\r\n\r\nThe answer is among the resulting fields. Hint: It is related to mfa authentication.\r\n\r\n### Challenge 203:\r\n_**Bud accidentally makes an S3 bucket publicly accessible. What is the event ID of the API 2call that enabled public access? Answer guidance: Include any special characters/punctuation.**_\r\n\r\nMy first course of action was to find Bud’s account. I assumed it was either _bstoll_ -> “Bud Stoll” or _btun_ -> “Bud Tun”. After searching “Bud Stoll,” I confirmed his account was _bstoll_. Next, I had to find an event that would result in changing the accessibility of a bucket. I recalled _put events_ were events that changed policies.\r\n\r\n` index=“botsv3” earliest=0 bstoll eventName=put* `\r\n\r\nThe answer is one of the two resulting event IDs in the _eventID_ field.\r\n\r\n### Challenge 204:\r\n_**What is the name of the S3 bucket that was made publicly accessible?**_\r\n\r\nWe already have the information needed thanks to the previous question. The answer is in the _requestParameters.bucketName_ field.\r\n\r\n### Challenge 205:\r\n_**What is the name of the text file that was successfully uploaded into the S3 bucket while it was publicly accessible? Answer guidance: Provide just the file name and extension, not the full path. (Example: filename.docx instead of /mylogs/web/filename.docx)**_\r\n\r\nNow that we know the bucket name, we can add that to the search along with the key word _.txt_ for text files.\r\n\r\n` index=\"botsv3\" earliest=0 frothlywebcode *txt* `\r\n\r\nI found the file while scrolling through the events.\r\n\r\n### Challenge 219:\r\n_**Bud accidentally commits AWS access keys to an external code repository. Shortly after, he receives a notification from AWS that the account had been compromised. What is the support case ID that Amazon opens on his behalf?**_\r\n\r\nBecause Bud receives a notification from AWS, I decided to search for an email from Amazon. I also decided to search a keyword, _access keys_.\r\n\r\n` index=\"botsv3\" earliest=0 sourcetype=”stream:smtp” access keys `\r\n\r\nAs I was scrolling through the fields, I found one called _content body_, which contained the email amazon sent and the answer we are looking for.\r\n\r\n### Challenge 220:\r\n_**AWS access keys consist of two parts: an access key ID (e.g., AKIAIOSFODNN7EXAMPLE) and a secret access key (e.g., wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY). What is the secret access key of the key that was leaked to the external code repository?**_\r\n\r\nThe answer to this question is also in the email from the previous search/question. There is a link that leads you to a site with the answer.\r\n\r\n### Challenge 221:\r\n_**Using the leaked key, the adversary makes an unauthorized attempt to create a key for a specific resource. What is the name of that resource? Answer guidance: One word.**_\r\n\r\nOnce again, the answer from the previous question helped me search for the answer to this question. I add the leaked access key that I found to the search. \r\n\r\n` index=botsv3 earliest=0 sourcetype=\"aws:cloudtrail\" AKIAJOGCDXJ5NW5PXUPA `\r\n\r\nThe name of the resource is found in the _errorMessage_ field.\r\n\r\n### Challenge 222:\r\n_**Using the leaked key, the adversary makes an unauthorized attempt to describe an account. What is the full user agent string of the application that originated the request?**_\r\n\r\nI once again add the leaked key to the search. I recalled seeing an event name called _getUser_, which I thought might help because we are looking for the user agent string, so I add that to the search as well.\r\n\r\n` index=botsv3 earliest=0 sourcetype=\"aws:cloudtrail\" AKIAJOGCDXJ5NW5PXUPA eventName=getUser `\r\n\r\nThe answer is in the _userAgent_ field.\r\n\r\n### Challenge 301:\r\n_**What external client IP address is able to initiate successful logins to Frothly using an expired user account?**_\r\n\r\nFor this question, I started by search the a keyword, _expired_.\r\n\r\n` index=botsv3 earliest=0 expired `\r\n\r\nI found that the  _ms:aad:signin_, had a single event. I figured this might be relevant because the question was asking about logins/signins. The answer is in the _ipAddress_ field of that single event.\r\n\r\n### Challenge 303:\r\n_**What is the password for the user that was successfully created by the user \"root\" on the on-premises Linux system?**_\r\n\r\nI had to recall the power shell commands I learned a while back for this question. I remember that _adduser_ creates a user, so I decided to search for _adduser_ and _root_.\r\n\r\n` index=botsv3 earliest=0 adduser root `\r\n\r\nThe password is in one of the resulting event fields. Hint: the field has to do with passwords LoL\r\n\r\n### Challenge 305:\r\n_**What is the process ID of the process listening on a \"leet\" port?**_\r\n\r\nI had no idea what a “leet port” was, so I searched it up on Google. The number _1337_ popped up so I added that to my search.\r\n\r\n` index=botsv3 earliest=0 1337 `\r\n\r\nI found the answer in the _columns.pid_ event field.","note":"Don't delete this file! It's used internally to help with page regeneration."}